Codigo de entropia:
Consiste en tener las posiciones de las particulas en un instate de tiempo dado y apartir de ello
calcular la entropia.
la implementacion consiste en tener en un archivo.dat o punto .txt  con las posiciones (x,y) de las 
particulas donde cada fila represente una particula y cada columna su posicion x e y respectivamente
ej:
4.033401756630872370e+01 5.820290797217671042e+01
5.635212013890905780e+01 6.013421396940731967e+01
5.281346280664693893e+01 5.346568653603971200e+01

de esta forma a partir de ejecutar ./entropia < datos_posicones.dat se obtiene el valor de entropia
el codigo fue pensado para que el tamaño de las divisiones o grid usado sea adaptable ya que un 
punto del problema pide cambiar este tamaño y verificar una relacion, ademas de poder adaptar el 
tamaño del plano xy a tener en cuenta, sin embargo cuenta con el problema de ser dependiente al 
formato de la entrada de datos, la compatibilidad con la simulacion de difusion, ademas 
por construccion no tiene en cuenta particulas fuera del rango ajustado.

Error en funcion walk.cpp:
    en el metodo para seleccionar la particula con coin = getRandomInt(N_particles), dado que coin 
    representa un indice entonces deberia ir desde 0 hasta  N_particles-1 ya que coin = N_particles
    moveria la posicion de una particula ficticia, el problema pasa desapercibido dado que 
    el compilador no detecta el error, y al usar sanitizers tampoco arroja ningun mensaje, aunque 
    usando estos ultimos resulta mas facil aislar el error, y mediante pruebas llegar a la raiz del
    problema.

Implementaciones completadas:
modificar entropia para que yo pueda pasarle la posicion vieja de una unica particula y me calcule 
el cambio en la entropia, y que a su vez cuando se llame la primera vez a la funcion calcule la 
entropia inicial del sistema, es decir :
1. antes del loop entropia calcula la entropia de todo el arreglo
    1.1 para ello en el primer llamado entropia crea la matriz de subdivisiones y asigna el conteo 
        de dichos valores, matriz que posteriormente se usara para comparar cantidades en subdivisiones.
2. durante el loop entropia calcula el cambio en la entropia
    2.1 si old_data asigna el mismo indice que new_data entonces no hubo cambio en la entropia,
        de lo contrario se cambiara el valor del conteo respectivo al indice de old_data, y de new_data 
        por lo que se calculara el cambio de la entropia en ese caso y se retorna a la simulacion.


3. modificar el colteo de particulas en la grid usando matrices a usar un vector que mapee la matriz
    con el fin de optimizar la manipulacion de memoria con arreglos contiguos, y ademas poder tener 
    matrices de mayor tamaño como se vio hoy (20-mar-24) en clase.
    ademas de probar cuantitativamente las mejoras de usar el metodo 2 para calcular la entropia 
    (el que se basa en una comparacion entre la posicion antigua y la actual), 
4.Ademas de pulir los resultados de los demas puntos del proyecto, y la creacion de un mejor makefile
    que compile con sanitizers y pueda compilar programas idependientes para hacer los test.

Nuevas implementaciones:
    1. finalizacion del punto 2, verificando si cambiar el tamaño del container se refiere a el tamaño
        del recipiente total, o al tamaño de las subdivisionesde la grilla, en mi opinion sera el 
        tamaño de las subdivisiones puesto que el tamaño del recipiente total tiene tambien que ver 
        con el tamaño del delta que se mueve cada particula, mietras que el tamañode las subdivisiones
        representa mejor como puede cambiar el tiempo que tarda el sistema en llegar al equilibrio.  

Organizacion: 
    Con el fin de tener mayor organizacion tanto en los archivos como en las carpetas se realizaran 
    multiples archivos "main.cpp" cuyos resultados sean la resolucion de los diferentes puntos, teniendo 
    en comun las funciones de "utils".